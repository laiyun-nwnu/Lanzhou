
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>地名详情 - 兰州地名学习</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js"></script>
  <style>
    body { font-family: "Microsoft YaHei", "PingFang SC", sans-serif; background-color: #f8f9fa; }
    .navbar { background-color: #3a5a40; }
    .navbar-brand, .nav-link { color: white !important; }
    .place-header { background-color: #a3b18a; color: white; padding: 2rem 0; margin-bottom: 2rem; }
    .character-card { border: none; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); transition: transform 0.3s; height: 100%; }
    .character-card:hover { transform: translateY(-5px); }
    .character { font-size: 3rem; font-weight: bold; margin-bottom: 0.5rem; }
    .pinyin { font-size: 1.2rem; color: #666; margin-bottom: 1rem; }
    .hsk-badge { display: inline-block; padding: 0.25rem 0.5rem; border-radius: 4px; margin-right: 0.5rem; font-size: 0.8rem; font-weight: bold; }
    .hsk-1 { background-color: #e6f7ff; color: #0050b3; }
    .hsk-2 { background-color: #d9f7be; color: #237804; }
    .hsk-3 { background-color: #fff7e6; color: #ad4e00; }
    .hsk-4 { background-color: #fff1f0; color: #a8071a; }
    .hsk-5 { background-color: #f9f0ff; color: #531dab; }
    .hsk-6 { background-color: #e6fffb; color: #006d75; }
    .hsk-unknown { background-color: #f0f0f0; color: #595959; }
    .detail-item { margin-bottom: 0.5rem; }
    .detail-label { font-weight: bold; color: #666; }
    .semantic-network { 
      width: 100%; 
      height: 400px; 
      margin-bottom: 2rem; 
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .characters-container {
      margin-bottom: 2rem;
    }
    .character-item {
      display: inline-block;
      width: 80px;
      height: 80px;
      margin: 10px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      text-align: center;
      line-height: 80px;
      font-size: 2.5rem;
      cursor: pointer;
      transition: all 0.3s;
    }
    .character-item:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .related-places {
      margin-bottom: 2rem;
    }
    .related-place-item {
      display: block;
      padding: 10px 15px;
      margin-bottom: 10px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      text-decoration: none;
      color: #333;
      transition: all 0.3s;
    }
    .related-place-item:hover {
      transform: translateX(5px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .section-title {
      margin-bottom: 1.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid #a3b18a;
      color: #3a5a40;
    }
  </style>
</head>
<body>
  <!-- 导航栏 -->
  <nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container">
      <a class="navbar-brand" href="index.html">兰州地名学习</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" href="index.html">地名网络</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="characters.html">汉字学习</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="about.html">关于项目</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- 地名标题 -->
  <header class="place-header">
    <div class="container text-center">
      <h1 id="place-name" class="display-4">地名加载中...</h1>
      <p id="place-pinyin" class="lead">拼音加载中...</p>
    </div>
  </header>

  <div class="container mb-5">
    <!-- 地名汉字列表 -->
    <section class="characters-container">
      <h2 class="section-title">包含汉字</h2>
      <div id="characters-list" class="d-flex flex-wrap justify-content-center">
        <!-- 汉字将在这里动态加载 -->
      </div>
    </section>

    <!-- 语义网络可视化 -->
    <section>
      <h2 class="section-title">语义网络</h2>
      <div id="semantic-network" class="semantic-network"></div>
    </section>

    <div class="row">
      <!-- 地名详情 -->
      <div class="col-md-6 mb-4">
        <div class="card h-100">
          <div class="card-body">
            <h2 class="card-title mb-4">地名详情</h2>
            <div class="detail-item">
              <span class="detail-label">HSK等级：</span>
              <span id="place-hsk-level">加载中...</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">中心性：</span>
              <span id="place-centrality">加载中...</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">类别：</span>
              <span id="place-category">加载中...</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">描述：</span>
              <p id="place-description">加载中...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- 相关地名 -->
      <div class="col-md-6 mb-4">
        <div class="card h-100">
          <div class="card-body">
            <h2 class="card-title mb-4">关联地名</h2>
            <div id="related-places" class="related-places">
              <!-- 相关地名将在这里动态加载 -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // 获取URL参数
    const urlParams = new URLSearchParams(window.location.search);
    const placeName = urlParams.get('name');
    
    // 假设我们有这些数据文件
    let placeData = {};
    let networkData = {};
    
    // 加载地名数据
fetch('place_data.json')
  .then(response => response.json())
  .then(data => {
    placeData = data;
    if (placeName && placeData[placeName]) {
      renderPlaceDetails(placeName, placeData[placeName]);
      renderCharacters(placeName, placeData[placeName]);
    } else {
      document.getElementById('place-name').textContent = '未找到地名';
    }
  });

// 加载网络数据
fetch('place_network_top100.json')
  .then(response => response.json())
  .then(data => {
    networkData = data;
    if (placeName) {
      renderSemanticNetwork(placeName, networkData);
      renderRelatedPlaces(placeName, networkData);
    }
  });
    
    // 渲染地名详情
    function renderPlaceDetails(name, data) {
      document.getElementById('place-name').textContent = name;
      document.getElementById('place-pinyin').textContent = data.pinyin || '';
      
      // HSK等级
      const hskLevel = data.level || '未收录';
      const hskBadge = document.createElement('span');
      hskBadge.className = `hsk-badge hsk-${getHSKClass(hskLevel)}`;
      hskBadge.textContent = hskLevel;
      document.getElementById('place-hsk-level').innerHTML = '';
      document.getElementById('place-hsk-level').appendChild(hskBadge);
      
      // 中心性
      document.getElementById('place-centrality').textContent = data.centrality ? 
        data.centrality.toFixed(2) : '未知';
      
      // 类别
      document.getElementById('place-category').textContent = 
        getCategoryName(data.category) || '未分类';
      
      // 描述
      document.getElementById('place-description').textContent = 
        data.description || '暂无描述';
    }
    
    // 渲染包含的汉字
    function renderCharacters(name, data) {
      const charactersContainer = document.getElementById('characters-list');
      charactersContainer.innerHTML = '';
      
      // 拆分地名为单个汉字
      const characters = name.split('');
      
      characters.forEach(char => {
        const charItem = document.createElement('div');
        charItem.className = 'character-item';
        charItem.textContent = char;
        charItem.onclick = function() {
          window.location.href = `character.html?char=${char}`;
        };
        charactersContainer.appendChild(charItem);
      });
    }
    
    // 渲染语义网络
    function renderSemanticNetwork(name, networkData) {
      const chart = echarts.init(document.getElementById('semantic-network'));
      
      // 找出与当前地名相关的节点和连接
      const relatedNodes = [];
      const relatedLinks = [];
      const currentNode = networkData.nodes.find(node => node.name === name);
      
      if (!currentNode) return;
      
      // 添加当前节点
      relatedNodes.push({
        ...currentNode,
        symbolSize: 50,
        itemStyle: {
          color: '#3a5a40'
        }
      });
      
      // 找出与当前节点直接相连的边
      const directLinks = networkData.links.filter(
        link => link.source === name || link.target === name
      );
      
      // 按权重排序并取前20个
      directLinks.sort((a, b) => b.value - a.value);
      const top20Links = directLinks.slice(0, 20);
      
      // 添加相关链接和节点
      top20Links.forEach(link => {
        relatedLinks.push(link);
        
        const otherNodeName = link.source === name ? link.target : link.source;
        const otherNode = networkData.nodes.find(node => node.name === otherNodeName);
        
        if (otherNode && !relatedNodes.some(node => node.name === otherNodeName)) {
          relatedNodes.push({
            ...otherNode,
            symbolSize: 30 + otherNode.centrality * 20
          });
        }
      });
      
      const option = {
        title: {
          text: `"${name}"的语义网络`,
          left: 'center',
          top: 10,
          textStyle: {
            color: '#3a5a40'
          }
        },
        tooltip: {
          trigger: 'item',
          formatter: function(params) {
            if (params.dataType === 'node') {
              return `${params.data.name}<br>中心性: ${params.data.centrality?.toFixed(2) || '未知'}`;
            } else {
              return `${params.data.source} → ${params.data.target}<br>关联强度: ${params.data.value?.toFixed(2) || '未知'}`;
            }
          }
        },
        legend: {
          data: ['景点名胜', '城区街道', '郊区县域', '其他地名'],
          bottom: 10
        },
        series: [{
          type: 'graph',
          layout: 'force',
          data: relatedNodes,
          links: relatedLinks,
          categories: [
            { name: '景点名胜' },
            { name: '城区街道' },
            { name: '郊区县域' },
            { name: '其他地名' }
          ],
          roam: true,
          label: {
            show: true,
            position: 'right',
            formatter: '{b}'
          },
          force: {
            repulsion: 100,
            edgeLength: 100
          },
          emphasis: {
            focus: 'adjacency',
            lineStyle: {
              width: 5
            }
          }
        }]
      };
      
      chart.setOption(option);
      
      // 响应式调整
      window.addEventListener('resize', function() {
        chart.resize();
      });
    }
    
    // 渲染关联地名
    function renderRelatedPlaces(name, networkData) {
      const container = document.getElementById('related-places');
      container.innerHTML = '';
      
      // 找出与当前地名相关的连接
      const relatedLinks = networkData.links.filter(
        link => link.source === name || link.target === name
      );
      
      // 按权重排序并取前5个
      relatedLinks.sort((a, b) => b.value - a.value);
      const top5Links = relatedLinks.slice(0, 5);
      
      if (top5Links.length === 0) {
        container.innerHTML = '<p>暂无关联地名数据</p>';
        return;
      }
      
      // 添加相关地名
      top5Links.forEach(link => {
        const otherNodeName = link.source === name ? link.target : link.source;
        
        const linkItem = document.createElement('a');
        linkItem.className = 'related-place-item';
        linkItem.href = `place.html?name=${otherNodeName}`;
        
        const strength = Math.round(link.value * 100) / 100;
        linkItem.innerHTML = `
          <div class="d-flex justify-content-between align-items-center">
            <strong>${otherNodeName}</strong>
            <span class="badge bg-secondary">关联度: ${strength}</span>
          </div>
        `;
        
        container.appendChild(linkItem);
      });
    }
    
    // 辅助函数：获取HSK等级对应的CSS类
    function getHSKClass(level) {
      if (level.includes('一级')) return '1';
      if (level.includes('二级')) return '2';
      if (level.includes('三级')) return '3';
      if (level.includes('四级')) return '4';
      if (level.includes('五级')) return '5';
      if (level.includes('六级')) return '6';
      return 'unknown';
    }
    
    // 辅助函数：获取类别名称
    function getCategoryName(category) {
      const categories = [
        '景点名胜',
        '城区街道',
        '郊区县域',
        '其他地名'
      ];
      return categories[category] || '未分类';
    }
  </script>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
